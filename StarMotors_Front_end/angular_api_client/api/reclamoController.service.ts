/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Garantia } from '../model/garantia';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReclamoControllerService {

    protected basePath = '//starmotorsapinosql.herokuapp.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * listInformeProformaReparacion
     * 
     * @param estado estado
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listInformeProformaReparacionUsingGET(estado: number, idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listInformeProformaReparacionUsingGET(estado: number, idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listInformeProformaReparacionUsingGET(estado: number, idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listInformeProformaReparacionUsingGET(estado: number, idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling listInformeProformaReparacionUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listInformeProformaReparacionUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (estado !== undefined && estado !== null) {
            queryParameters = queryParameters.set('estado', <any>estado);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/reclamo/proforma/listByStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listReclamoByStatus
     * 
     * @param estado estado
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listReclamoByStatusUsingGET(estado: number, idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listReclamoByStatusUsingGET(estado: number, idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listReclamoByStatusUsingGET(estado: number, idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listReclamoByStatusUsingGET(estado: number, idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling listReclamoByStatusUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listReclamoByStatusUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (estado !== undefined && estado !== null) {
            queryParameters = queryParameters.set('estado', <any>estado);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/reclamo/listByStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postInformeProformaReparacion
     * 
     * @param detalle detalle
     * @param fecha fecha
     * @param idEmpleadoAPIRestSQL idEmpleadoAPIRestSQL
     * @param idGarantia idGarantia
     * @param subTotalManoObra subTotalManoObra
     * @param subTotalRepuestos subTotalRepuestos
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postInformeProformaReparacionUsingPUT(detalle: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, subTotalManoObra: number, subTotalRepuestos: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postInformeProformaReparacionUsingPUT(detalle: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, subTotalManoObra: number, subTotalRepuestos: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postInformeProformaReparacionUsingPUT(detalle: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, subTotalManoObra: number, subTotalRepuestos: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postInformeProformaReparacionUsingPUT(detalle: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, subTotalManoObra: number, subTotalRepuestos: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (detalle === null || detalle === undefined) {
            throw new Error('Required parameter detalle was null or undefined when calling postInformeProformaReparacionUsingPUT.');
        }

        if (fecha === null || fecha === undefined) {
            throw new Error('Required parameter fecha was null or undefined when calling postInformeProformaReparacionUsingPUT.');
        }

        if (idEmpleadoAPIRestSQL === null || idEmpleadoAPIRestSQL === undefined) {
            throw new Error('Required parameter idEmpleadoAPIRestSQL was null or undefined when calling postInformeProformaReparacionUsingPUT.');
        }

        if (idGarantia === null || idGarantia === undefined) {
            throw new Error('Required parameter idGarantia was null or undefined when calling postInformeProformaReparacionUsingPUT.');
        }

        if (subTotalManoObra === null || subTotalManoObra === undefined) {
            throw new Error('Required parameter subTotalManoObra was null or undefined when calling postInformeProformaReparacionUsingPUT.');
        }

        if (subTotalRepuestos === null || subTotalRepuestos === undefined) {
            throw new Error('Required parameter subTotalRepuestos was null or undefined when calling postInformeProformaReparacionUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (detalle !== undefined && detalle !== null) {
            queryParameters = queryParameters.set('detalle', <any>detalle);
        }
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }
        if (idEmpleadoAPIRestSQL !== undefined && idEmpleadoAPIRestSQL !== null) {
            queryParameters = queryParameters.set('idEmpleadoAPIRestSQL', <any>idEmpleadoAPIRestSQL);
        }
        if (idGarantia !== undefined && idGarantia !== null) {
            queryParameters = queryParameters.set('idGarantia', <any>idGarantia);
        }
        if (subTotalManoObra !== undefined && subTotalManoObra !== null) {
            queryParameters = queryParameters.set('subTotalManoObra', <any>subTotalManoObra);
        }
        if (subTotalRepuestos !== undefined && subTotalRepuestos !== null) {
            queryParameters = queryParameters.set('subTotalRepuestos', <any>subTotalRepuestos);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/reclamo/proforma/post`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postInformeRechazoGarantia
     * 
     * @param descripcion descripcion
     * @param fecha fecha
     * @param idEmpleadoAPIRestSQL idEmpleadoAPIRestSQL
     * @param idGarantia idGarantia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postInformeRechazoGarantiaUsingPUT(descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postInformeRechazoGarantiaUsingPUT(descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postInformeRechazoGarantiaUsingPUT(descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postInformeRechazoGarantiaUsingPUT(descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (descripcion === null || descripcion === undefined) {
            throw new Error('Required parameter descripcion was null or undefined when calling postInformeRechazoGarantiaUsingPUT.');
        }

        if (fecha === null || fecha === undefined) {
            throw new Error('Required parameter fecha was null or undefined when calling postInformeRechazoGarantiaUsingPUT.');
        }

        if (idEmpleadoAPIRestSQL === null || idEmpleadoAPIRestSQL === undefined) {
            throw new Error('Required parameter idEmpleadoAPIRestSQL was null or undefined when calling postInformeRechazoGarantiaUsingPUT.');
        }

        if (idGarantia === null || idGarantia === undefined) {
            throw new Error('Required parameter idGarantia was null or undefined when calling postInformeRechazoGarantiaUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (descripcion !== undefined && descripcion !== null) {
            queryParameters = queryParameters.set('descripcion', <any>descripcion);
        }
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }
        if (idEmpleadoAPIRestSQL !== undefined && idEmpleadoAPIRestSQL !== null) {
            queryParameters = queryParameters.set('idEmpleadoAPIRestSQL', <any>idEmpleadoAPIRestSQL);
        }
        if (idGarantia !== undefined && idGarantia !== null) {
            queryParameters = queryParameters.set('idGarantia', <any>idGarantia);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/reclamo/rechazo/post`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postReclamoGarantia
     * 
     * @param danio danio
     * @param descripcion descripcion
     * @param fecha fecha
     * @param idEmpleadoAPIRestSQL idEmpleadoAPIRestSQL
     * @param idGarantia idGarantia
     * @param razonesReclamo razonesReclamo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postReclamoGarantiaUsingPOST(danio: string, descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, razonesReclamo: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postReclamoGarantiaUsingPOST(danio: string, descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, razonesReclamo: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postReclamoGarantiaUsingPOST(danio: string, descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, razonesReclamo: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postReclamoGarantiaUsingPOST(danio: string, descripcion: string, fecha: string, idEmpleadoAPIRestSQL: number, idGarantia: number, razonesReclamo: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (danio === null || danio === undefined) {
            throw new Error('Required parameter danio was null or undefined when calling postReclamoGarantiaUsingPOST.');
        }

        if (descripcion === null || descripcion === undefined) {
            throw new Error('Required parameter descripcion was null or undefined when calling postReclamoGarantiaUsingPOST.');
        }

        if (fecha === null || fecha === undefined) {
            throw new Error('Required parameter fecha was null or undefined when calling postReclamoGarantiaUsingPOST.');
        }

        if (idEmpleadoAPIRestSQL === null || idEmpleadoAPIRestSQL === undefined) {
            throw new Error('Required parameter idEmpleadoAPIRestSQL was null or undefined when calling postReclamoGarantiaUsingPOST.');
        }

        if (idGarantia === null || idGarantia === undefined) {
            throw new Error('Required parameter idGarantia was null or undefined when calling postReclamoGarantiaUsingPOST.');
        }

        if (razonesReclamo === null || razonesReclamo === undefined) {
            throw new Error('Required parameter razonesReclamo was null or undefined when calling postReclamoGarantiaUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (danio !== undefined && danio !== null) {
            queryParameters = queryParameters.set('danio', <any>danio);
        }
        if (descripcion !== undefined && descripcion !== null) {
            queryParameters = queryParameters.set('descripcion', <any>descripcion);
        }
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }
        if (idEmpleadoAPIRestSQL !== undefined && idEmpleadoAPIRestSQL !== null) {
            queryParameters = queryParameters.set('idEmpleadoAPIRestSQL', <any>idEmpleadoAPIRestSQL);
        }
        if (idGarantia !== undefined && idGarantia !== null) {
            queryParameters = queryParameters.set('idGarantia', <any>idGarantia);
        }
        if (razonesReclamo) {
            razonesReclamo.forEach((element) => {
                queryParameters = queryParameters.append('razonesReclamo', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/reclamo/post`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
