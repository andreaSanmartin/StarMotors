/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FacturaVentaControllerService {

    protected basePath = '//starmotorsapisql.herokuapp.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addFactura
     * 
     * @param descuento descuento
     * @param fecha fecha
     * @param idCliente idCliente
     * @param idConcesionaria idConcesionaria
     * @param idCotizacionPrevia idCotizacionPrevia
     * @param iva iva
     * @param listIdVehiculo listIdVehiculo
     * @param subTotal subTotal
     * @param total total
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFacturaUsingPOST1(descuento: number, fecha: string, idCliente: number, idConcesionaria: number, idCotizacionPrevia: number, iva: number, listIdVehiculo: Array<number>, subTotal: number, total: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addFacturaUsingPOST1(descuento: number, fecha: string, idCliente: number, idConcesionaria: number, idCotizacionPrevia: number, iva: number, listIdVehiculo: Array<number>, subTotal: number, total: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addFacturaUsingPOST1(descuento: number, fecha: string, idCliente: number, idConcesionaria: number, idCotizacionPrevia: number, iva: number, listIdVehiculo: Array<number>, subTotal: number, total: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addFacturaUsingPOST1(descuento: number, fecha: string, idCliente: number, idConcesionaria: number, idCotizacionPrevia: number, iva: number, listIdVehiculo: Array<number>, subTotal: number, total: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (descuento === null || descuento === undefined) {
            throw new Error('Required parameter descuento was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (fecha === null || fecha === undefined) {
            throw new Error('Required parameter fecha was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (idCliente === null || idCliente === undefined) {
            throw new Error('Required parameter idCliente was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (idCotizacionPrevia === null || idCotizacionPrevia === undefined) {
            throw new Error('Required parameter idCotizacionPrevia was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (iva === null || iva === undefined) {
            throw new Error('Required parameter iva was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (listIdVehiculo === null || listIdVehiculo === undefined) {
            throw new Error('Required parameter listIdVehiculo was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (subTotal === null || subTotal === undefined) {
            throw new Error('Required parameter subTotal was null or undefined when calling addFacturaUsingPOST1.');
        }

        if (total === null || total === undefined) {
            throw new Error('Required parameter total was null or undefined when calling addFacturaUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (descuento !== undefined && descuento !== null) {
            queryParameters = queryParameters.set('descuento', <any>descuento);
        }
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }
        if (idCliente !== undefined && idCliente !== null) {
            queryParameters = queryParameters.set('idCliente', <any>idCliente);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (idCotizacionPrevia !== undefined && idCotizacionPrevia !== null) {
            queryParameters = queryParameters.set('idCotizacionPrevia', <any>idCotizacionPrevia);
        }
        if (iva !== undefined && iva !== null) {
            queryParameters = queryParameters.set('iva', <any>iva);
        }
        if (listIdVehiculo) {
            listIdVehiculo.forEach((element) => {
                queryParameters = queryParameters.append('listIdVehiculo', <any>element);
            })
        }
        if (subTotal !== undefined && subTotal !== null) {
            queryParameters = queryParameters.set('subTotal', <any>subTotal);
        }
        if (total !== undefined && total !== null) {
            queryParameters = queryParameters.set('total', <any>total);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/venta/factura/add`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findDetalleByIdVehiculo
     * 
     * @param idVehiculo idVehiculo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findDetalleByIdVehiculoUsingGET(idVehiculo: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findDetalleByIdVehiculoUsingGET(idVehiculo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findDetalleByIdVehiculoUsingGET(idVehiculo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findDetalleByIdVehiculoUsingGET(idVehiculo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idVehiculo === null || idVehiculo === undefined) {
            throw new Error('Required parameter idVehiculo was null or undefined when calling findDetalleByIdVehiculoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idVehiculo !== undefined && idVehiculo !== null) {
            queryParameters = queryParameters.set('idVehiculo', <any>idVehiculo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/venta/factura/findDetalleByVehiculo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findEnlacesCotizacio
     * 
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findEnlacesCotizacioUsingGET(idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findEnlacesCotizacioUsingGET(idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findEnlacesCotizacioUsingGET(idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findEnlacesCotizacioUsingGET(idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling findEnlacesCotizacioUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/venta/factura/findEnlacesCotizacion`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findMaxIdFactura
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findMaxIdFacturaUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findMaxIdFacturaUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findMaxIdFacturaUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findMaxIdFacturaUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/venta/factura/maxId`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
