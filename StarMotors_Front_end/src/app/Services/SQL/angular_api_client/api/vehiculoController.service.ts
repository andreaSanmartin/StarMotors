/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { TblEjemplar } from '../model/tblEjemplar';
import { TblMarca } from '../model/tblMarca';
import { TblModelo } from '../model/tblModelo';
import { TblVehiculo } from '../model/tblVehiculo';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VehiculoControllerService {

    protected basePath = '//starmotorsapisql.herokuapp.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findEjemplarById
     * 
     * @param idEjemplar idEjemplar
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findEjemplarByIdUsingGET(idEjemplar: number, observe?: 'body', reportProgress?: boolean): Observable<TblEjemplar>;
    public findEjemplarByIdUsingGET(idEjemplar: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TblEjemplar>>;
    public findEjemplarByIdUsingGET(idEjemplar: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TblEjemplar>>;
    public findEjemplarByIdUsingGET(idEjemplar: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEjemplar === null || idEjemplar === undefined) {
            throw new Error('Required parameter idEjemplar was null or undefined when calling findEjemplarByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idEjemplar !== undefined && idEjemplar !== null) {
            queryParameters = queryParameters.set('idEjemplar', <any>idEjemplar);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TblEjemplar>('get',`${this.basePath}/vehiculo/findEjemplarById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findModeloByMarca
     * 
     * @param idMarca idMarca
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findModeloByMarcaUsingGET(idMarca: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblModelo>>;
    public findModeloByMarcaUsingGET(idMarca: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblModelo>>>;
    public findModeloByMarcaUsingGET(idMarca: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblModelo>>>;
    public findModeloByMarcaUsingGET(idMarca: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMarca === null || idMarca === undefined) {
            throw new Error('Required parameter idMarca was null or undefined when calling findModeloByMarcaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idMarca !== undefined && idMarca !== null) {
            queryParameters = queryParameters.set('idMarca', <any>idMarca);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblModelo>>('get',`${this.basePath}/modelos/findByMarca`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findVehiculoById
     * 
     * @param idVehiculo idVehiculo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findVehiculoByIdUsingGET(idVehiculo: number, observe?: 'body', reportProgress?: boolean): Observable<TblVehiculo>;
    public findVehiculoByIdUsingGET(idVehiculo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TblVehiculo>>;
    public findVehiculoByIdUsingGET(idVehiculo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TblVehiculo>>;
    public findVehiculoByIdUsingGET(idVehiculo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idVehiculo === null || idVehiculo === undefined) {
            throw new Error('Required parameter idVehiculo was null or undefined when calling findVehiculoByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idVehiculo !== undefined && idVehiculo !== null) {
            queryParameters = queryParameters.set('idVehiculo', <any>idVehiculo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TblVehiculo>('get',`${this.basePath}/vehiculo/findById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findVehiculoDisponibleByIdEjemplar
     * 
     * @param idEjemplar idEjemplar
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findVehiculoDisponibleByIdEjemplarUsingGET(idEjemplar: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findVehiculoDisponibleByIdEjemplarUsingGET(idEjemplar: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findVehiculoDisponibleByIdEjemplarUsingGET(idEjemplar: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findVehiculoDisponibleByIdEjemplarUsingGET(idEjemplar: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idEjemplar === null || idEjemplar === undefined) {
            throw new Error('Required parameter idEjemplar was null or undefined when calling findVehiculoDisponibleByIdEjemplarUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idEjemplar !== undefined && idEjemplar !== null) {
            queryParameters = queryParameters.set('idEjemplar', <any>idEjemplar);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/vehiculo/findDisponibleByEjemplar`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listEjemplaresByAnio
     * 
     * @param anio anio
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEjemplaresByAnioUsingGET(anio: number, idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblEjemplar>>;
    public listEjemplaresByAnioUsingGET(anio: number, idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblEjemplar>>>;
    public listEjemplaresByAnioUsingGET(anio: number, idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblEjemplar>>>;
    public listEjemplaresByAnioUsingGET(anio: number, idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (anio === null || anio === undefined) {
            throw new Error('Required parameter anio was null or undefined when calling listEjemplaresByAnioUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listEjemplaresByAnioUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (anio !== undefined && anio !== null) {
            queryParameters = queryParameters.set('anio', <any>anio);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblEjemplar>>('get',`${this.basePath}/vehiculo/listEjemplaresByAnio`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listEjemplaresById
     * 
     * @param listEjemplarId listEjemplarId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEjemplaresByIdUsingGET(listEjemplarId: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<TblEjemplar>>;
    public listEjemplaresByIdUsingGET(listEjemplarId: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblEjemplar>>>;
    public listEjemplaresByIdUsingGET(listEjemplarId: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblEjemplar>>>;
    public listEjemplaresByIdUsingGET(listEjemplarId: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (listEjemplarId === null || listEjemplarId === undefined) {
            throw new Error('Required parameter listEjemplarId was null or undefined when calling listEjemplaresByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (listEjemplarId) {
            listEjemplarId.forEach((element) => {
                queryParameters = queryParameters.append('listEjemplarId', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblEjemplar>>('get',`${this.basePath}/vehiculo/listEjemplaresById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listEjemplaresByMarca
     * 
     * @param idConcesionaria idConcesionaria
     * @param idMarca idMarca
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEjemplaresByMarcaUsingGET(idConcesionaria: number, idMarca: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblEjemplar>>;
    public listEjemplaresByMarcaUsingGET(idConcesionaria: number, idMarca: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblEjemplar>>>;
    public listEjemplaresByMarcaUsingGET(idConcesionaria: number, idMarca: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblEjemplar>>>;
    public listEjemplaresByMarcaUsingGET(idConcesionaria: number, idMarca: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listEjemplaresByMarcaUsingGET.');
        }

        if (idMarca === null || idMarca === undefined) {
            throw new Error('Required parameter idMarca was null or undefined when calling listEjemplaresByMarcaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (idMarca !== undefined && idMarca !== null) {
            queryParameters = queryParameters.set('idMarca', <any>idMarca);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblEjemplar>>('get',`${this.basePath}/vehiculo/listEjemplaresByMarca`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listEjemplaresByModelo
     * 
     * @param idConcesionaria idConcesionaria
     * @param idModelo idModelo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEjemplaresByModeloUsingGET(idConcesionaria: number, idModelo: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblEjemplar>>;
    public listEjemplaresByModeloUsingGET(idConcesionaria: number, idModelo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblEjemplar>>>;
    public listEjemplaresByModeloUsingGET(idConcesionaria: number, idModelo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblEjemplar>>>;
    public listEjemplaresByModeloUsingGET(idConcesionaria: number, idModelo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listEjemplaresByModeloUsingGET.');
        }

        if (idModelo === null || idModelo === undefined) {
            throw new Error('Required parameter idModelo was null or undefined when calling listEjemplaresByModeloUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (idModelo !== undefined && idModelo !== null) {
            queryParameters = queryParameters.set('idModelo', <any>idModelo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblEjemplar>>('get',`${this.basePath}/vehiculo/listEjemplaresByModelo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listEjemplares
     * 
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listEjemplaresUsingGET(idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblEjemplar>>;
    public listEjemplaresUsingGET(idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblEjemplar>>>;
    public listEjemplaresUsingGET(idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblEjemplar>>>;
    public listEjemplaresUsingGET(idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listEjemplaresUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblEjemplar>>('get',`${this.basePath}/vehiculo/listEjemplares`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listMarcas
     * 
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listMarcasUsingGET(idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblMarca>>;
    public listMarcasUsingGET(idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblMarca>>>;
    public listMarcasUsingGET(idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblMarca>>>;
    public listMarcasUsingGET(idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listMarcasUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblMarca>>('get',`${this.basePath}/marca/getAll`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listModelos
     * 
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listModelosUsingGET(idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblModelo>>;
    public listModelosUsingGET(idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblModelo>>>;
    public listModelosUsingGET(idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblModelo>>>;
    public listModelosUsingGET(idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listModelosUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblModelo>>('get',`${this.basePath}/modelo/getAll`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listVehiculoByNombreModelo
     * 
     * @param idConcesionaria idConcesionaria
     * @param listIdVehiculo listIdVehiculo
     * @param modNombre modNombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listVehiculoByNombreModeloUsingGET(idConcesionaria: number, listIdVehiculo: Array<number>, modNombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TblVehiculo>>;
    public listVehiculoByNombreModeloUsingGET(idConcesionaria: number, listIdVehiculo: Array<number>, modNombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblVehiculo>>>;
    public listVehiculoByNombreModeloUsingGET(idConcesionaria: number, listIdVehiculo: Array<number>, modNombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblVehiculo>>>;
    public listVehiculoByNombreModeloUsingGET(idConcesionaria: number, listIdVehiculo: Array<number>, modNombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listVehiculoByNombreModeloUsingGET.');
        }

        if (listIdVehiculo === null || listIdVehiculo === undefined) {
            throw new Error('Required parameter listIdVehiculo was null or undefined when calling listVehiculoByNombreModeloUsingGET.');
        }

        if (modNombre === null || modNombre === undefined) {
            throw new Error('Required parameter modNombre was null or undefined when calling listVehiculoByNombreModeloUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (listIdVehiculo) {
            listIdVehiculo.forEach((element) => {
                queryParameters = queryParameters.append('listIdVehiculo', <any>element);
            })
        }
        if (modNombre !== undefined && modNombre !== null) {
            queryParameters = queryParameters.set('modNombre', <any>modNombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblVehiculo>>('get',`${this.basePath}/vehiculo/listByNombreModelo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listVehiculofindById
     * 
     * @param idVehiculo idVehiculo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listVehiculofindByIdUsingGET(idVehiculo: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<TblVehiculo>>;
    public listVehiculofindByIdUsingGET(idVehiculo: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblVehiculo>>>;
    public listVehiculofindByIdUsingGET(idVehiculo: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblVehiculo>>>;
    public listVehiculofindByIdUsingGET(idVehiculo: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idVehiculo === null || idVehiculo === undefined) {
            throw new Error('Required parameter idVehiculo was null or undefined when calling listVehiculofindByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idVehiculo) {
            idVehiculo.forEach((element) => {
                queryParameters = queryParameters.append('idVehiculo', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblVehiculo>>('get',`${this.basePath}/vehiculo/listVehiculoFindById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listVehiculosByClient
     * 
     * @param idCliente idCliente
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listVehiculosByClientUsingGET(idCliente: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TblVehiculo>>;
    public listVehiculosByClientUsingGET(idCliente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblVehiculo>>>;
    public listVehiculosByClientUsingGET(idCliente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblVehiculo>>>;
    public listVehiculosByClientUsingGET(idCliente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCliente === null || idCliente === undefined) {
            throw new Error('Required parameter idCliente was null or undefined when calling listVehiculosByClientUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idCliente !== undefined && idCliente !== null) {
            queryParameters = queryParameters.set('idCliente', <any>idCliente);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblVehiculo>>('get',`${this.basePath}/vehiculo/getByClient`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
