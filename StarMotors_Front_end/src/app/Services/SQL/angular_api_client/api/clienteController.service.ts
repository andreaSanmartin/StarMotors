/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { TblCliente } from '../model/tblCliente';
import { TblPersona } from '../model/tblPersona';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ClienteControllerService {

    protected basePath = '//starmotorsapisql.herokuapp.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addClient
     * 
     * @param apellido apellido
     * @param cedula cedula
     * @param direccion direccion
     * @param email email
     * @param fechaNacimiento fechaNacimiento
     * @param nombre nombre
     * @param password password
     * @param telefono telefono
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addClientUsingPOST(apellido: string, cedula: string, direccion: string, email: string, fechaNacimiento: string, nombre: string, password: string, telefono: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addClientUsingPOST(apellido: string, cedula: string, direccion: string, email: string, fechaNacimiento: string, nombre: string, password: string, telefono: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addClientUsingPOST(apellido: string, cedula: string, direccion: string, email: string, fechaNacimiento: string, nombre: string, password: string, telefono: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addClientUsingPOST(apellido: string, cedula: string, direccion: string, email: string, fechaNacimiento: string, nombre: string, password: string, telefono: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (apellido === null || apellido === undefined) {
            throw new Error('Required parameter apellido was null or undefined when calling addClientUsingPOST.');
        }

        if (cedula === null || cedula === undefined) {
            throw new Error('Required parameter cedula was null or undefined when calling addClientUsingPOST.');
        }

        if (direccion === null || direccion === undefined) {
            throw new Error('Required parameter direccion was null or undefined when calling addClientUsingPOST.');
        }

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling addClientUsingPOST.');
        }

        if (fechaNacimiento === null || fechaNacimiento === undefined) {
            throw new Error('Required parameter fechaNacimiento was null or undefined when calling addClientUsingPOST.');
        }

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling addClientUsingPOST.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling addClientUsingPOST.');
        }

        if (telefono === null || telefono === undefined) {
            throw new Error('Required parameter telefono was null or undefined when calling addClientUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apellido !== undefined && apellido !== null) {
            queryParameters = queryParameters.set('apellido', <any>apellido);
        }
        if (cedula !== undefined && cedula !== null) {
            queryParameters = queryParameters.set('cedula', <any>cedula);
        }
        if (direccion !== undefined && direccion !== null) {
            queryParameters = queryParameters.set('direccion', <any>direccion);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (fechaNacimiento !== undefined && fechaNacimiento !== null) {
            queryParameters = queryParameters.set('fechaNacimiento', <any>fechaNacimiento);
        }
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }
        if (telefono !== undefined && telefono !== null) {
            queryParameters = queryParameters.set('telefono', <any>telefono);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/client/add`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * allClient
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allClientUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TblCliente>>;
    public allClientUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblCliente>>>;
    public allClientUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblCliente>>>;
    public allClientUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblCliente>>('get',`${this.basePath}/client/listAllCLient`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByCedula
     * 
     * @param cedula cedula
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByCedulaUsingGET(cedula: string, observe?: 'body', reportProgress?: boolean): Observable<TblCliente>;
    public findByCedulaUsingGET(cedula: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TblCliente>>;
    public findByCedulaUsingGET(cedula: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TblCliente>>;
    public findByCedulaUsingGET(cedula: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cedula === null || cedula === undefined) {
            throw new Error('Required parameter cedula was null or undefined when calling findByCedulaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cedula !== undefined && cedula !== null) {
            queryParameters = queryParameters.set('cedula', <any>cedula);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TblCliente>('get',`${this.basePath}/client/findClientByCedula`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByUsername
     * 
     * @param username username
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByUsernameUsingGET(username: string, observe?: 'body', reportProgress?: boolean): Observable<TblCliente>;
    public findByUsernameUsingGET(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TblCliente>>;
    public findByUsernameUsingGET(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TblCliente>>;
    public findByUsernameUsingGET(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling findByUsernameUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (username !== undefined && username !== null) {
            queryParameters = queryParameters.set('username', <any>username);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TblCliente>('get',`${this.basePath}/client/findByUsername`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findClienteByCedula
     * 
     * @param perCedula perCedula
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findClienteByCedulaUsingGET(perCedula: string, observe?: 'body', reportProgress?: boolean): Observable<TblPersona>;
    public findClienteByCedulaUsingGET(perCedula: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TblPersona>>;
    public findClienteByCedulaUsingGET(perCedula: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TblPersona>>;
    public findClienteByCedulaUsingGET(perCedula: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (perCedula === null || perCedula === undefined) {
            throw new Error('Required parameter perCedula was null or undefined when calling findClienteByCedulaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (perCedula !== undefined && perCedula !== null) {
            queryParameters = queryParameters.set('perCedula', <any>perCedula);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TblPersona>('get',`${this.basePath}/client/findByCedula`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findClienteById
     * 
     * @param idCliente idCliente
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findClienteByIdUsingGET(idCliente: number, observe?: 'body', reportProgress?: boolean): Observable<TblCliente>;
    public findClienteByIdUsingGET(idCliente: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TblCliente>>;
    public findClienteByIdUsingGET(idCliente: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TblCliente>>;
    public findClienteByIdUsingGET(idCliente: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCliente === null || idCliente === undefined) {
            throw new Error('Required parameter idCliente was null or undefined when calling findClienteByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idCliente !== undefined && idCliente !== null) {
            queryParameters = queryParameters.set('idCliente', <any>idCliente);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TblCliente>('get',`${this.basePath}/client/findById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listClientById
     * 
     * @param clientsId clientsId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClientByIdUsingGET(clientsId: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<TblCliente>>;
    public listClientByIdUsingGET(clientsId: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TblCliente>>>;
    public listClientByIdUsingGET(clientsId: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TblCliente>>>;
    public listClientByIdUsingGET(clientsId: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (clientsId === null || clientsId === undefined) {
            throw new Error('Required parameter clientsId was null or undefined when calling listClientByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (clientsId) {
            clientsId.forEach((element) => {
                queryParameters = queryParameters.append('clientsId', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TblCliente>>('get',`${this.basePath}/client/listClientById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateClient
     * 
     * @param cedula cedula
     * @param direccion direccion
     * @param idcliente idcliente
     * @param idpersona idpersona
     * @param telefono telefono
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateClientUsingPUT(cedula: string, direccion: string, idcliente: number, idpersona: number, telefono: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateClientUsingPUT(cedula: string, direccion: string, idcliente: number, idpersona: number, telefono: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateClientUsingPUT(cedula: string, direccion: string, idcliente: number, idpersona: number, telefono: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateClientUsingPUT(cedula: string, direccion: string, idcliente: number, idpersona: number, telefono: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cedula === null || cedula === undefined) {
            throw new Error('Required parameter cedula was null or undefined when calling updateClientUsingPUT.');
        }

        if (direccion === null || direccion === undefined) {
            throw new Error('Required parameter direccion was null or undefined when calling updateClientUsingPUT.');
        }

        if (idcliente === null || idcliente === undefined) {
            throw new Error('Required parameter idcliente was null or undefined when calling updateClientUsingPUT.');
        }

        if (idpersona === null || idpersona === undefined) {
            throw new Error('Required parameter idpersona was null or undefined when calling updateClientUsingPUT.');
        }

        if (telefono === null || telefono === undefined) {
            throw new Error('Required parameter telefono was null or undefined when calling updateClientUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cedula !== undefined && cedula !== null) {
            queryParameters = queryParameters.set('cedula', <any>cedula);
        }
        if (direccion !== undefined && direccion !== null) {
            queryParameters = queryParameters.set('direccion', <any>direccion);
        }
        if (idcliente !== undefined && idcliente !== null) {
            queryParameters = queryParameters.set('idcliente', <any>idcliente);
        }
        if (idpersona !== undefined && idpersona !== null) {
            queryParameters = queryParameters.set('idpersona', <any>idpersona);
        }
        if (telefono !== undefined && telefono !== null) {
            queryParameters = queryParameters.set('telefono', <any>telefono);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/client/update`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
