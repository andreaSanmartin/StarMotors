/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FacturaReparacionControllerService {

    protected basePath = '//starmotorsapisql.herokuapp.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addFactura
     * 
     * @param descuento Descuento
     * @param garantia Garantia
     * @param subtotal Subtotal
     * @param total Total
     * @param detalleManoObra detalleManoObra
     * @param detalleReparacion detalleReparacion
     * @param detalleRepuestos detalleRepuestos
     * @param fecha fecha
     * @param idCliente idCliente
     * @param idConcesionaria idConcesionaria
     * @param numChasis numChasis
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFacturaUsingPOST(descuento: number, garantia: number, subtotal: number, total: number, detalleManoObra: string, detalleReparacion: string, detalleRepuestos: string, fecha: string, idCliente: number, idConcesionaria: number, numChasis: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addFacturaUsingPOST(descuento: number, garantia: number, subtotal: number, total: number, detalleManoObra: string, detalleReparacion: string, detalleRepuestos: string, fecha: string, idCliente: number, idConcesionaria: number, numChasis: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addFacturaUsingPOST(descuento: number, garantia: number, subtotal: number, total: number, detalleManoObra: string, detalleReparacion: string, detalleRepuestos: string, fecha: string, idCliente: number, idConcesionaria: number, numChasis: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addFacturaUsingPOST(descuento: number, garantia: number, subtotal: number, total: number, detalleManoObra: string, detalleReparacion: string, detalleRepuestos: string, fecha: string, idCliente: number, idConcesionaria: number, numChasis: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (descuento === null || descuento === undefined) {
            throw new Error('Required parameter descuento was null or undefined when calling addFacturaUsingPOST.');
        }

        if (garantia === null || garantia === undefined) {
            throw new Error('Required parameter garantia was null or undefined when calling addFacturaUsingPOST.');
        }

        if (subtotal === null || subtotal === undefined) {
            throw new Error('Required parameter subtotal was null or undefined when calling addFacturaUsingPOST.');
        }

        if (total === null || total === undefined) {
            throw new Error('Required parameter total was null or undefined when calling addFacturaUsingPOST.');
        }

        if (detalleManoObra === null || detalleManoObra === undefined) {
            throw new Error('Required parameter detalleManoObra was null or undefined when calling addFacturaUsingPOST.');
        }

        if (detalleReparacion === null || detalleReparacion === undefined) {
            throw new Error('Required parameter detalleReparacion was null or undefined when calling addFacturaUsingPOST.');
        }

        if (detalleRepuestos === null || detalleRepuestos === undefined) {
            throw new Error('Required parameter detalleRepuestos was null or undefined when calling addFacturaUsingPOST.');
        }

        if (fecha === null || fecha === undefined) {
            throw new Error('Required parameter fecha was null or undefined when calling addFacturaUsingPOST.');
        }

        if (idCliente === null || idCliente === undefined) {
            throw new Error('Required parameter idCliente was null or undefined when calling addFacturaUsingPOST.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling addFacturaUsingPOST.');
        }

        if (numChasis === null || numChasis === undefined) {
            throw new Error('Required parameter numChasis was null or undefined when calling addFacturaUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (descuento !== undefined && descuento !== null) {
            queryParameters = queryParameters.set('Descuento', <any>descuento);
        }
        if (garantia !== undefined && garantia !== null) {
            queryParameters = queryParameters.set('Garantia', <any>garantia);
        }
        if (subtotal !== undefined && subtotal !== null) {
            queryParameters = queryParameters.set('Subtotal', <any>subtotal);
        }
        if (total !== undefined && total !== null) {
            queryParameters = queryParameters.set('Total', <any>total);
        }
        if (detalleManoObra !== undefined && detalleManoObra !== null) {
            queryParameters = queryParameters.set('detalleManoObra', <any>detalleManoObra);
        }
        if (detalleReparacion !== undefined && detalleReparacion !== null) {
            queryParameters = queryParameters.set('detalleReparacion', <any>detalleReparacion);
        }
        if (detalleRepuestos !== undefined && detalleRepuestos !== null) {
            queryParameters = queryParameters.set('detalleRepuestos', <any>detalleRepuestos);
        }
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }
        if (idCliente !== undefined && idCliente !== null) {
            queryParameters = queryParameters.set('idCliente', <any>idCliente);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (numChasis !== undefined && numChasis !== null) {
            queryParameters = queryParameters.set('numChasis', <any>numChasis);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/reparacion/factura/add`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByListId
     * 
     * @param listIdFacturas listIdFacturas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByListIdUsingGET(listIdFacturas: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findByListIdUsingGET(listIdFacturas: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findByListIdUsingGET(listIdFacturas: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findByListIdUsingGET(listIdFacturas: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (listIdFacturas === null || listIdFacturas === undefined) {
            throw new Error('Required parameter listIdFacturas was null or undefined when calling findByListIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (listIdFacturas) {
            listIdFacturas.forEach((element) => {
                queryParameters = queryParameters.append('listIdFacturas', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/reparacion/factura/findByListId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findMaxIdFactura
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findMaxIdFacturaUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findMaxIdFacturaUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findMaxIdFacturaUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findMaxIdFacturaUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/reparacion/factura/maxId`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
