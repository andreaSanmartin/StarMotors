/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Cotizaciones } from '../model/cotizaciones';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CotizacionesControllerService {

    protected basePath = '//starmotorsapinosql.herokuapp.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findByCedulaCliente
     * 
     * @param cedula cedula
     * @param estado estado
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByCedulaClienteUsingGET(cedula: string, estado: number, idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Cotizaciones>>;
    public findByCedulaClienteUsingGET(cedula: string, estado: number, idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cotizaciones>>>;
    public findByCedulaClienteUsingGET(cedula: string, estado: number, idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cotizaciones>>>;
    public findByCedulaClienteUsingGET(cedula: string, estado: number, idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cedula === null || cedula === undefined) {
            throw new Error('Required parameter cedula was null or undefined when calling findByCedulaClienteUsingGET.');
        }

        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling findByCedulaClienteUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling findByCedulaClienteUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cedula !== undefined && cedula !== null) {
            queryParameters = queryParameters.set('cedula', <any>cedula);
        }
        if (estado !== undefined && estado !== null) {
            queryParameters = queryParameters.set('estado', <any>estado);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cotizaciones>>('get',`${this.basePath}/cotizaciones/listByCliente`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByEstado
     * 
     * @param estado estado
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByEstadoUsingGET(estado: number, idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Cotizaciones>>;
    public findByEstadoUsingGET(estado: number, idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cotizaciones>>>;
    public findByEstadoUsingGET(estado: number, idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cotizaciones>>>;
    public findByEstadoUsingGET(estado: number, idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling findByEstadoUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling findByEstadoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (estado !== undefined && estado !== null) {
            queryParameters = queryParameters.set('estado', <any>estado);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cotizaciones>>('get',`${this.basePath}/cotizaciones/listByEstado`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByIdEjemplar
     * 
     * @param idConcesionaria idConcesionaria
     * @param idEjemplar idEjemplar
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdEjemplarUsingGET(idConcesionaria: number, idEjemplar: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Cotizaciones>>;
    public findByIdEjemplarUsingGET(idConcesionaria: number, idEjemplar: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cotizaciones>>>;
    public findByIdEjemplarUsingGET(idConcesionaria: number, idEjemplar: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cotizaciones>>>;
    public findByIdEjemplarUsingGET(idConcesionaria: number, idEjemplar: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling findByIdEjemplarUsingGET.');
        }

        if (idEjemplar === null || idEjemplar === undefined) {
            throw new Error('Required parameter idEjemplar was null or undefined when calling findByIdEjemplarUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (idEjemplar !== undefined && idEjemplar !== null) {
            queryParameters = queryParameters.set('idEjemplar', <any>idEjemplar);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cotizaciones>>('get',`${this.basePath}/cotizaciones/listByEjemplar`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findById
     * 
     * @param idCotizacion idCotizacion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdUsingGET(idCotizacion: number, observe?: 'body', reportProgress?: boolean): Observable<Cotizaciones>;
    public findByIdUsingGET(idCotizacion: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cotizaciones>>;
    public findByIdUsingGET(idCotizacion: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cotizaciones>>;
    public findByIdUsingGET(idCotizacion: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCotizacion === null || idCotizacion === undefined) {
            throw new Error('Required parameter idCotizacion was null or undefined when calling findByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idCotizacion !== undefined && idCotizacion !== null) {
            queryParameters = queryParameters.set('idCotizacion', <any>idCotizacion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Cotizaciones>('get',`${this.basePath}/cotizaciones/findById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listCotizaciones
     * 
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listCotizacionesUsingGET(idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Cotizaciones>>;
    public listCotizacionesUsingGET(idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cotizaciones>>>;
    public listCotizacionesUsingGET(idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cotizaciones>>>;
    public listCotizacionesUsingGET(idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listCotizacionesUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cotizaciones>>('get',`${this.basePath}/cotizaciones/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postCotizacion
     * 
     * @param cotDescripcion cotDescripcion
     * @param cotFecha cotFecha
     * @param idConcesionaria idConcesionaria
     * @param idEjemplar idEjemplar
     * @param perApellido perApellido
     * @param perCedula perCedula
     * @param perEmail perEmail
     * @param perFechaNacimiento perFechaNacimiento
     * @param perNombre perNombre
     * @param perTelefono perTelefono
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCotizacionUsingPOST(cotDescripcion: string, cotFecha: string, idConcesionaria: number, idEjemplar: number, perApellido: string, perCedula: string, perEmail: string, perFechaNacimiento: string, perNombre: string, perTelefono: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCotizacionUsingPOST(cotDescripcion: string, cotFecha: string, idConcesionaria: number, idEjemplar: number, perApellido: string, perCedula: string, perEmail: string, perFechaNacimiento: string, perNombre: string, perTelefono: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCotizacionUsingPOST(cotDescripcion: string, cotFecha: string, idConcesionaria: number, idEjemplar: number, perApellido: string, perCedula: string, perEmail: string, perFechaNacimiento: string, perNombre: string, perTelefono: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCotizacionUsingPOST(cotDescripcion: string, cotFecha: string, idConcesionaria: number, idEjemplar: number, perApellido: string, perCedula: string, perEmail: string, perFechaNacimiento: string, perNombre: string, perTelefono: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cotDescripcion === null || cotDescripcion === undefined) {
            throw new Error('Required parameter cotDescripcion was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (cotFecha === null || cotFecha === undefined) {
            throw new Error('Required parameter cotFecha was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (idEjemplar === null || idEjemplar === undefined) {
            throw new Error('Required parameter idEjemplar was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (perApellido === null || perApellido === undefined) {
            throw new Error('Required parameter perApellido was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (perCedula === null || perCedula === undefined) {
            throw new Error('Required parameter perCedula was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (perEmail === null || perEmail === undefined) {
            throw new Error('Required parameter perEmail was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (perFechaNacimiento === null || perFechaNacimiento === undefined) {
            throw new Error('Required parameter perFechaNacimiento was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (perNombre === null || perNombre === undefined) {
            throw new Error('Required parameter perNombre was null or undefined when calling postCotizacionUsingPOST.');
        }

        if (perTelefono === null || perTelefono === undefined) {
            throw new Error('Required parameter perTelefono was null or undefined when calling postCotizacionUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cotDescripcion !== undefined && cotDescripcion !== null) {
            queryParameters = queryParameters.set('cotDescripcion', <any>cotDescripcion);
        }
        if (cotFecha !== undefined && cotFecha !== null) {
            queryParameters = queryParameters.set('cotFecha', <any>cotFecha);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (idEjemplar !== undefined && idEjemplar !== null) {
            queryParameters = queryParameters.set('idEjemplar', <any>idEjemplar);
        }
        if (perApellido !== undefined && perApellido !== null) {
            queryParameters = queryParameters.set('perApellido', <any>perApellido);
        }
        if (perCedula !== undefined && perCedula !== null) {
            queryParameters = queryParameters.set('perCedula', <any>perCedula);
        }
        if (perEmail !== undefined && perEmail !== null) {
            queryParameters = queryParameters.set('perEmail', <any>perEmail);
        }
        if (perFechaNacimiento !== undefined && perFechaNacimiento !== null) {
            queryParameters = queryParameters.set('perFechaNacimiento', <any>perFechaNacimiento);
        }
        if (perNombre !== undefined && perNombre !== null) {
            queryParameters = queryParameters.set('perNombre', <any>perNombre);
        }
        if (perTelefono !== undefined && perTelefono !== null) {
            queryParameters = queryParameters.set('perTelefono', <any>perTelefono);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/cotizaciones/postByParameters`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postCotizacion
     * 
     * @param body cotizacion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCotizacionUsingPOST1(body: Cotizaciones, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postCotizacionUsingPOST1(body: Cotizaciones, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postCotizacionUsingPOST1(body: Cotizaciones, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postCotizacionUsingPOST1(body: Cotizaciones, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postCotizacionUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/cotizaciones/post`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateStatusCotizacion
     * 
     * @param estado estado
     * @param idCotizacion idCotizacion
     * @param idEmpleadoAPIRestSQL idEmpleadoAPIRestSQL
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStatusCotizacionUsingPUT(estado: number, idCotizacion: number, idEmpleadoAPIRestSQL: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateStatusCotizacionUsingPUT(estado: number, idCotizacion: number, idEmpleadoAPIRestSQL: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateStatusCotizacionUsingPUT(estado: number, idCotizacion: number, idEmpleadoAPIRestSQL: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateStatusCotizacionUsingPUT(estado: number, idCotizacion: number, idEmpleadoAPIRestSQL: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling updateStatusCotizacionUsingPUT.');
        }

        if (idCotizacion === null || idCotizacion === undefined) {
            throw new Error('Required parameter idCotizacion was null or undefined when calling updateStatusCotizacionUsingPUT.');
        }

        if (idEmpleadoAPIRestSQL === null || idEmpleadoAPIRestSQL === undefined) {
            throw new Error('Required parameter idEmpleadoAPIRestSQL was null or undefined when calling updateStatusCotizacionUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (estado !== undefined && estado !== null) {
            queryParameters = queryParameters.set('estado', <any>estado);
        }
        if (idCotizacion !== undefined && idCotizacion !== null) {
            queryParameters = queryParameters.set('idCotizacion', <any>idCotizacion);
        }
        if (idEmpleadoAPIRestSQL !== undefined && idEmpleadoAPIRestSQL !== null) {
            queryParameters = queryParameters.set('idEmpleadoAPIRestSQL', <any>idEmpleadoAPIRestSQL);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/cotizaciones/put`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
