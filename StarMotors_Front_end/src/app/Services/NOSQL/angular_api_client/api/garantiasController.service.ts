/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Garantia } from '../model/garantia';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GarantiasControllerService {

    protected basePath = '//starmotorsapinosql.herokuapp.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * countGarantiaByIdVehiculo
     * 
     * @param listIdVehiculo ListIdVehiculo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countGarantiaByIdVehiculoUsingGET(listIdVehiculo?: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countGarantiaByIdVehiculoUsingGET(listIdVehiculo?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countGarantiaByIdVehiculoUsingGET(listIdVehiculo?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countGarantiaByIdVehiculoUsingGET(listIdVehiculo?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (listIdVehiculo !== undefined && listIdVehiculo !== null) {
            queryParameters = queryParameters.set('ListIdVehiculo', <any>listIdVehiculo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<number>('get',`${this.basePath}/garantia/countGarantiaByIdVehiculo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * countInformeTallerExists
     * 
     * @param idVehiculo idVehiculo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countInformeTallerExistsUsingGET(idVehiculo?: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public countInformeTallerExistsUsingGET(idVehiculo?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public countInformeTallerExistsUsingGET(idVehiculo?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public countInformeTallerExistsUsingGET(idVehiculo?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idVehiculo !== undefined && idVehiculo !== null) {
            queryParameters = queryParameters.set('idVehiculo', <any>idVehiculo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<number>('get',`${this.basePath}/garantia/countInformeTallerExists`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findGarantiaById
     * 
     * @param idGarantia idGarantia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findGarantiaByIdUsingGET(idGarantia: number, observe?: 'body', reportProgress?: boolean): Observable<Garantia>;
    public findGarantiaByIdUsingGET(idGarantia: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Garantia>>;
    public findGarantiaByIdUsingGET(idGarantia: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Garantia>>;
    public findGarantiaByIdUsingGET(idGarantia: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idGarantia === null || idGarantia === undefined) {
            throw new Error('Required parameter idGarantia was null or undefined when calling findGarantiaByIdUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idGarantia !== undefined && idGarantia !== null) {
            queryParameters = queryParameters.set('idGarantia', <any>idGarantia);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Garantia>('get',`${this.basePath}/garantia/findById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listGarantiaByAnio
     * 
     * @param fechaFinal fechaFinal
     * @param fechaInicio fechaInicio
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listGarantiaByAnioUsingGET(fechaFinal?: string, fechaInicio?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listGarantiaByAnioUsingGET(fechaFinal?: string, fechaInicio?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listGarantiaByAnioUsingGET(fechaFinal?: string, fechaInicio?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listGarantiaByAnioUsingGET(fechaFinal?: string, fechaInicio?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fechaFinal !== undefined && fechaFinal !== null) {
            queryParameters = queryParameters.set('fechaFinal', <any>fechaFinal);
        }
        if (fechaInicio !== undefined && fechaInicio !== null) {
            queryParameters = queryParameters.set('fechaInicio', <any>fechaInicio);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/garantia/listGarantiaByAnio`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listGarantiasbyExists
     * 
     * @param exists exists
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listGarantiasbyExistsUsingGET(exists?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listGarantiasbyExistsUsingGET(exists?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listGarantiasbyExistsUsingGET(exists?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listGarantiasbyExistsUsingGET(exists?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (exists !== undefined && exists !== null) {
            queryParameters = queryParameters.set('exists', <any>exists);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/garantia/listByGarantiaExists`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listInformeTallerbyExists
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listInformeTallerbyExistsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listInformeTallerbyExistsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listInformeTallerbyExistsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listInformeTallerbyExistsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/garantia/listByInformeTallerExists`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listSolicitudesByClientAndVehiculo
     * 
     * @param idCliente idCliente
     * @param idConcesionaria idConcesionaria
     * @param idVehiculo idVehiculo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSolicitudesByClientAndVehiculoUsingGET(idCliente: number, idConcesionaria: number, idVehiculo: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listSolicitudesByClientAndVehiculoUsingGET(idCliente: number, idConcesionaria: number, idVehiculo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listSolicitudesByClientAndVehiculoUsingGET(idCliente: number, idConcesionaria: number, idVehiculo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listSolicitudesByClientAndVehiculoUsingGET(idCliente: number, idConcesionaria: number, idVehiculo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCliente === null || idCliente === undefined) {
            throw new Error('Required parameter idCliente was null or undefined when calling listSolicitudesByClientAndVehiculoUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listSolicitudesByClientAndVehiculoUsingGET.');
        }

        if (idVehiculo === null || idVehiculo === undefined) {
            throw new Error('Required parameter idVehiculo was null or undefined when calling listSolicitudesByClientAndVehiculoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idCliente !== undefined && idCliente !== null) {
            queryParameters = queryParameters.set('idCliente', <any>idCliente);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (idVehiculo !== undefined && idVehiculo !== null) {
            queryParameters = queryParameters.set('idVehiculo', <any>idVehiculo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/garantia/findByClientAndVehiculo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listSolicitudesByClient
     * 
     * @param idCliente idCliente
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSolicitudesByClientUsingGET(idCliente: number, idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listSolicitudesByClientUsingGET(idCliente: number, idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listSolicitudesByClientUsingGET(idCliente: number, idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listSolicitudesByClientUsingGET(idCliente: number, idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idCliente === null || idCliente === undefined) {
            throw new Error('Required parameter idCliente was null or undefined when calling listSolicitudesByClientUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listSolicitudesByClientUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idCliente !== undefined && idCliente !== null) {
            queryParameters = queryParameters.set('idCliente', <any>idCliente);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/garantia/findByClient`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listSolicitudesGarantiaByStatus
     * 
     * @param estado estado
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSolicitudesGarantiaByStatusUsingGET(estado: number, idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listSolicitudesGarantiaByStatusUsingGET(estado: number, idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listSolicitudesGarantiaByStatusUsingGET(estado: number, idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listSolicitudesGarantiaByStatusUsingGET(estado: number, idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling listSolicitudesGarantiaByStatusUsingGET.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listSolicitudesGarantiaByStatusUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (estado !== undefined && estado !== null) {
            queryParameters = queryParameters.set('estado', <any>estado);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/garantia/listByStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listSolicitudesGarantia
     * 
     * @param idConcesionaria idConcesionaria
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSolicitudesGarantiaUsingGET(idConcesionaria: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Garantia>>;
    public listSolicitudesGarantiaUsingGET(idConcesionaria: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Garantia>>>;
    public listSolicitudesGarantiaUsingGET(idConcesionaria: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Garantia>>>;
    public listSolicitudesGarantiaUsingGET(idConcesionaria: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling listSolicitudesGarantiaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Garantia>>('get',`${this.basePath}/garantia/listSolicitudes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postSolicitudGarantiaByParameters
     * 
     * @param fallosSistemasVehiculos fallosSistemasVehiculos
     * @param garDescripcion garDescripcion
     * @param garFecha garFecha
     * @param idCliente idCliente
     * @param idConcesionaria idConcesionaria
     * @param idVehiculo idVehiculo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSolicitudGarantiaByParametersUsingPOST(fallosSistemasVehiculos: Array<string>, garDescripcion: string, garFecha: string, idCliente: number, idConcesionaria: number, idVehiculo: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postSolicitudGarantiaByParametersUsingPOST(fallosSistemasVehiculos: Array<string>, garDescripcion: string, garFecha: string, idCliente: number, idConcesionaria: number, idVehiculo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postSolicitudGarantiaByParametersUsingPOST(fallosSistemasVehiculos: Array<string>, garDescripcion: string, garFecha: string, idCliente: number, idConcesionaria: number, idVehiculo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postSolicitudGarantiaByParametersUsingPOST(fallosSistemasVehiculos: Array<string>, garDescripcion: string, garFecha: string, idCliente: number, idConcesionaria: number, idVehiculo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fallosSistemasVehiculos === null || fallosSistemasVehiculos === undefined) {
            throw new Error('Required parameter fallosSistemasVehiculos was null or undefined when calling postSolicitudGarantiaByParametersUsingPOST.');
        }

        if (garDescripcion === null || garDescripcion === undefined) {
            throw new Error('Required parameter garDescripcion was null or undefined when calling postSolicitudGarantiaByParametersUsingPOST.');
        }

        if (garFecha === null || garFecha === undefined) {
            throw new Error('Required parameter garFecha was null or undefined when calling postSolicitudGarantiaByParametersUsingPOST.');
        }

        if (idCliente === null || idCliente === undefined) {
            throw new Error('Required parameter idCliente was null or undefined when calling postSolicitudGarantiaByParametersUsingPOST.');
        }

        if (idConcesionaria === null || idConcesionaria === undefined) {
            throw new Error('Required parameter idConcesionaria was null or undefined when calling postSolicitudGarantiaByParametersUsingPOST.');
        }

        if (idVehiculo === null || idVehiculo === undefined) {
            throw new Error('Required parameter idVehiculo was null or undefined when calling postSolicitudGarantiaByParametersUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fallosSistemasVehiculos) {
            fallosSistemasVehiculos.forEach((element) => {
                queryParameters = queryParameters.append('fallosSistemasVehiculos', <any>element);
            })
        }
        if (garDescripcion !== undefined && garDescripcion !== null) {
            queryParameters = queryParameters.set('garDescripcion', <any>garDescripcion);
        }
        if (garFecha !== undefined && garFecha !== null) {
            queryParameters = queryParameters.set('garFecha', <any>garFecha);
        }
        if (idCliente !== undefined && idCliente !== null) {
            queryParameters = queryParameters.set('idCliente', <any>idCliente);
        }
        if (idConcesionaria !== undefined && idConcesionaria !== null) {
            queryParameters = queryParameters.set('idConcesionaria', <any>idConcesionaria);
        }
        if (idVehiculo !== undefined && idVehiculo !== null) {
            queryParameters = queryParameters.set('idVehiculo', <any>idVehiculo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/garantia/postSolicitudByParameters`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateEstadoGarantia
     * 
     * @param estado estado
     * @param idEmpleadoAPIRestSQ idEmpleadoAPIRestSQ
     * @param idGarantia idGarantia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEstadoGarantiaUsingPUT(estado: number, idEmpleadoAPIRestSQ: number, idGarantia: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEstadoGarantiaUsingPUT(estado: number, idEmpleadoAPIRestSQ: number, idGarantia: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEstadoGarantiaUsingPUT(estado: number, idEmpleadoAPIRestSQ: number, idGarantia: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEstadoGarantiaUsingPUT(estado: number, idEmpleadoAPIRestSQ: number, idGarantia: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (estado === null || estado === undefined) {
            throw new Error('Required parameter estado was null or undefined when calling updateEstadoGarantiaUsingPUT.');
        }

        if (idEmpleadoAPIRestSQ === null || idEmpleadoAPIRestSQ === undefined) {
            throw new Error('Required parameter idEmpleadoAPIRestSQ was null or undefined when calling updateEstadoGarantiaUsingPUT.');
        }

        if (idGarantia === null || idGarantia === undefined) {
            throw new Error('Required parameter idGarantia was null or undefined when calling updateEstadoGarantiaUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (estado !== undefined && estado !== null) {
            queryParameters = queryParameters.set('estado', <any>estado);
        }
        if (idEmpleadoAPIRestSQ !== undefined && idEmpleadoAPIRestSQ !== null) {
            queryParameters = queryParameters.set('idEmpleadoAPIRestSQ', <any>idEmpleadoAPIRestSQ);
        }
        if (idGarantia !== undefined && idGarantia !== null) {
            queryParameters = queryParameters.set('idGarantia', <any>idGarantia);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/garantia/updateSolicitud`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateSolicitudGarantia
     * 
     * @param idFacturaReparacionApiSql IdFacturaReparacionApiSql
     * @param idEmpleadoApiSql idEmpleadoApiSql
     * @param idGarantia idGarantia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSolicitudGarantiaUsingPUT(idFacturaReparacionApiSql: number, idEmpleadoApiSql: number, idGarantia: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateSolicitudGarantiaUsingPUT(idFacturaReparacionApiSql: number, idEmpleadoApiSql: number, idGarantia: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateSolicitudGarantiaUsingPUT(idFacturaReparacionApiSql: number, idEmpleadoApiSql: number, idGarantia: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateSolicitudGarantiaUsingPUT(idFacturaReparacionApiSql: number, idEmpleadoApiSql: number, idGarantia: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idFacturaReparacionApiSql === null || idFacturaReparacionApiSql === undefined) {
            throw new Error('Required parameter idFacturaReparacionApiSql was null or undefined when calling updateSolicitudGarantiaUsingPUT.');
        }

        if (idEmpleadoApiSql === null || idEmpleadoApiSql === undefined) {
            throw new Error('Required parameter idEmpleadoApiSql was null or undefined when calling updateSolicitudGarantiaUsingPUT.');
        }

        if (idGarantia === null || idGarantia === undefined) {
            throw new Error('Required parameter idGarantia was null or undefined when calling updateSolicitudGarantiaUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idFacturaReparacionApiSql !== undefined && idFacturaReparacionApiSql !== null) {
            queryParameters = queryParameters.set('IdFacturaReparacionApiSql', <any>idFacturaReparacionApiSql);
        }
        if (idEmpleadoApiSql !== undefined && idEmpleadoApiSql !== null) {
            queryParameters = queryParameters.set('idEmpleadoApiSql', <any>idEmpleadoApiSql);
        }
        if (idGarantia !== undefined && idGarantia !== null) {
            queryParameters = queryParameters.set('idGarantia', <any>idGarantia);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/garantia/postSolicitud`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
